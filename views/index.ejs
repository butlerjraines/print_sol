<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Track $PRINT rewards by Marcus</title>

    <!-- Meta tags -->
    <meta name="description"
        content="An app made by Marcus Furrelius to support the $PRINT protocol by showing $SOL rewards. Track your $PRINT rewards easily and efficiently.">
    <meta name="author" content="Marcus Furrelius">

    <!-- Open Graph tags -->
    <meta property="og:title" content="Track $PRINT rewards by Marcus">
    <meta property="og:description"
        content="An app made by Marcus Furrelius to support the $PRINT protocol by showing $SOL rewards. Track your $PRINT rewards easily and efficiently.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://print.marcusfurrelius.com/">
    <meta property="og:image" content="images/print-rewards-marcus.png">

    <!-- Twitter Card tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Track $PRINT rewards by Marcus">
    <meta name="twitter:description"
        content="An app made by Marcus Furrelius to support the $PRINT protocol by showing $SOL rewards. Track your $PRINT rewards easily and efficiently.">
    <meta name="twitter:image" content="images/print-rewards-marcus.png">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .chart-container {
            position: relative;
            height: 70vh;
            width: 100%;
        }

        .footer {
            position: fixed;
            left: 0;
            bottom: 0;
            width: 100%;
            background-color: #f8f9fa;
            text-align: center;
            padding: 10px 0;
        }
    </style>
</head>

<body>
    <div class="container mt-5 mb-5">
        <h1 class="mb-4">Track $PRINT rewards by Marcus</h1>
        <div id="walletInputSection" class="mb-3" style="display: none;">
            <div class="input-group">
                <input type="text" id="walletAddressInput" class="form-control" placeholder="Enter wallet address">
                <button id="submitWalletBtn" class="btn btn-primary">Submit</button>
            </div>
        </div>
        <div id="walletConnectSection" class="mb-3" style="display: none;">
            <button id="connectPhantomBtn" class="btn btn-primary mb-2 mb-md-0 me-md-2">Connect to Phantom</button>
            <button id="connectSolflareBtn" class="btn btn-info">Connect to Solflare</button>
        </div>
        <button id="disconnectBtn" class="btn btn-danger" style="display: none;">Disconnect</button>
        <div id="loadingState" class="alert alert-primary mt-3" style="display: none;">
            Reading...
        </div>
        <div id="walletInfo" class="mt-3" style="display: none;">
            <div class="card mb-3">
                <div class="card-header">
                    <h2 class="mb-0">Wallet Address</h2>
                </div>
                <div class="card-body">
                    <p class="card-text" id="walletAddress"></p>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h3 class="mb-0">PRINT Holdings</h3>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Token Symbol</th>
                                    <th>Token Mint</th>
                                    <th>Amount</th>
                                    <th>Token Account Address</th>
                                </tr>
                            </thead>
                            <tbody id="tokenList"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h3 class="mb-0">Daily $SOL Reward Totals (Last 7 Days)</h3>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Total Amount (SOL)</th>
                                    <th>From</th>
                                </tr>
                            </thead>
                            <tbody id="solTransferList"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">$SOL Rewards Chart</h3>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="solTransfersChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer">
        <div class="container">
            Brought to you by <a href="https://marcusfurrelius.com" target="_blank">Marcus</a>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const walletConnectionMode = <%= typeof walletConnectionMode !== 'undefined' ? walletConnectionMode : 0 %>;
        const walletInputSection = document.getElementById('walletInputSection');
        const walletConnectSection = document.getElementById('walletConnectSection');
        const walletAddressInput = document.getElementById('walletAddressInput');
        const submitWalletBtn = document.getElementById('submitWalletBtn');
        const connectPhantomBtn = document.getElementById('connectPhantomBtn');
        const connectSolflareBtn = document.getElementById('connectSolflareBtn');
        const disconnectBtn = document.getElementById('disconnectBtn');
        const loadingState = document.getElementById('loadingState');
        const walletInfo = document.getElementById('walletInfo');
        const walletAddressSpan = document.getElementById('walletAddress');
        const tokenList = document.getElementById('tokenList');
        const solTransferList = document.getElementById('solTransferList');
        const solTransfersChart = document.getElementById('solTransfersChart');

        let wallet = null;
        let chart = null;

        // Initialize the correct input method based on walletConnectionMode
        if (walletConnectionMode === 1) {
            walletConnectSection.style.display = 'block';
            walletInputSection.style.display = 'none';
        } else {
            walletInputSection.style.display = 'block';
            walletConnectSection.style.display = 'none';
        }

        async function connectWallet(providerName) {
            try {
                loadingState.style.display = 'block';
                walletInfo.style.display = 'none';

                let provider;
                if (providerName === 'phantom') {
                    provider = window.solana;
                } else if (providerName === 'solflare') {
                    provider = window.solflare;
                }

                if (!provider) {
                    alert(`${providerName.charAt(0).toUpperCase() + providerName.slice(1)} wallet not found. Please install it.`);
                    loadingState.style.display = 'none';
                    return;
                }

                await provider.connect();
                wallet = provider;
                const publicKey = provider.publicKey.toString();

                await fetchAndDisplayWalletInfo(publicKey);

                walletConnectSection.style.display = 'none';
                disconnectBtn.style.display = 'inline-block';
                loadingState.style.display = 'none';
                walletInfo.style.display = 'block';
            } catch (err) {
                console.error("Error connecting wallet:", err);
                alert("Failed to connect wallet: " + err.message);
                loadingState.style.display = 'none';
            }
        }

        async function submitWalletAddress() {
            const address = walletAddressInput.value.trim();
            if (!address) {
                alert("Please enter a valid wallet address");
                return;
            }
            loadingState.style.display = 'block';
            walletInfo.style.display = 'none';

            try {
                await fetchAndDisplayWalletInfo(address);
                walletInputSection.style.display = 'none';
                disconnectBtn.style.display = 'inline-block';
                loadingState.style.display = 'none';
                walletInfo.style.display = 'block';
            } catch (err) {
                console.error("Error fetching wallet info:", err);
                alert("Failed to fetch wallet info: " + err.message);
                loadingState.style.display = 'none';
            }
        }

        async function fetchAndDisplayWalletInfo(address) {
            walletAddressSpan.textContent = address;

            // Fetch wallet info
            const response = await fetch(`/get-wallet-info?address=${address}`);
            const data = await response.json();
            if (data.error) {
                throw new Error(data.error + (data.details ? `: ${data.details}` : ''));
            }

            // Populate token list
            tokenList.innerHTML = '';
            data.significantTokens.forEach(token => {
                const row = tokenList.insertRow();
                row.insertCell(0).textContent = 'PRINT';
                row.insertCell(1).textContent = token.mint;
                row.insertCell(2).textContent = token.amount.toFixed(2);
                row.insertCell(3).textContent = token.tokenAccountAddress;
            });

            // Fetch daily SOL transfer totals
            const solTransfersResponse = await fetch(`/get-daily-transfer-totals?address=${address}`);
            const solTransfersData = await solTransfersResponse.json();
            if (solTransfersData.error) {
                throw new Error(solTransfersData.error + (solTransfersData.details ? `: ${solTransfersData.details}` : ''));
            }

            // Populate SOL transfers list and prepare chart data
            solTransferList.innerHTML = '';
            const chartLabels = [];
            const chartData = [];
            if (solTransfersData.dailyTotals.length === 0) {
                const row = solTransferList.insertRow();
                row.insertCell(0).colSpan = 3;
                row.insertCell(0).textContent = 'No rewards in the last 7 days';
            } else {
                solTransfersData.dailyTotals.forEach(daily => {
                    const row = solTransferList.insertRow();

                    // Format the date
                    const dateObj = new Date(daily.date);
                    const formattedDate = dateObj.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });

                    row.insertCell(0).textContent = formattedDate;
                    row.insertCell(1).textContent = daily.total.toFixed(9);
                    row.insertCell(2).textContent = daily.from || 'N/A';

                    chartLabels.unshift(formattedDate);
                    chartData.unshift(daily.total);
                });
            }

            // Create or update the chart
            if (chart) {
                chart.destroy();
            }
            chart = new Chart(solTransfersChart, {
                type: 'bar',
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: '$SOL Rewards',
                        data: chartData,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'SOL Amount'
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Daily $SOL Rewards (Last 7 Days)'
                        }
                    }
                }
            });
        }

        function disconnectWallet() {
            if (wallet) {
                wallet.disconnect();
                wallet = null;
            }
            if (walletConnectionMode === 1) {
                walletConnectSection.style.display = 'block';
            } else {
                walletInputSection.style.display = 'block';
                walletAddressInput.value = '';
            }
            disconnectBtn.style.display = 'none';
            walletInfo.style.display = 'none';
            loadingState.style.display = 'none';
            walletAddressSpan.textContent = '';
            tokenList.innerHTML = '';
            solTransferList.innerHTML = '';
            if (chart) {
                chart.destroy();
                chart = null;
            }
        }

        // Set up event listeners based on wallet connection mode
        if (walletConnectionMode === 1) {
            connectPhantomBtn.addEventListener('click', () => connectWallet('phantom'));
            connectSolflareBtn.addEventListener('click', () => connectWallet('solflare'));
        } else {
            submitWalletBtn.addEventListener('click', submitWalletAddress);
        }

        // This listener should be set up regardless of the mode
        disconnectBtn.addEventListener('click', disconnectWallet);
    </script>
</body>

</html>